# echo 'strategy:'; echo '  matrix:'; for dir in $(git ls-files '*/Dockerfile' | xargs -n1 dirname | sort -u); do tag="${dir//'/'/-}"; echo "    $tag:"; echo "      azureImage: 'ubuntu-16.04'"; echo "      buildContext: '$dir'"; done
strategy:
  matrix:
    apt-cacher-ng:
      azureImage: 'ubuntu-16.04'
      buildContext: 'apt-cacher-ng'
    backblaze-b2:
      azureImage: 'ubuntu-16.04'
      buildContext: 'backblaze-b2'
    beets:
      azureImage: 'ubuntu-16.04'
      buildContext: 'beets'
    byzanz:
      azureImage: 'ubuntu-16.04'
      buildContext: 'byzanz'
    caff:
      azureImage: 'ubuntu-16.04'
      buildContext: 'caff'
    certbot:
      azureImage: 'ubuntu-16.04'
      buildContext: 'certbot'
    debian-devel:
      azureImage: 'ubuntu-16.04'
      buildContext: 'debian/devel'
    debian-experimental:
      azureImage: 'ubuntu-16.04'
      buildContext: 'debian/experimental'
    debian-frankendebian:
      azureImage: 'ubuntu-16.04'
      buildContext: 'debian/frankendebian'
    debian-rc-buggy:
      azureImage: 'ubuntu-16.04'
      buildContext: 'debian/rc-buggy'
    debian-ubuntu-devel:
      azureImage: 'ubuntu-16.04'
      buildContext: 'debian/ubuntu-devel'
    dell-netextender:
      azureImage: 'ubuntu-16.04'
      buildContext: 'dell-netextender'
    dell-netextender-gui:
      azureImage: 'ubuntu-16.04'
      buildContext: 'dell-netextender/gui'
    diffoscope:
      azureImage: 'ubuntu-16.04'
      buildContext: 'diffoscope'
    docker-master:
      azureImage: 'ubuntu-16.04'
      buildContext: 'docker-master'
    docker-master-dind:
      azureImage: 'ubuntu-16.04'
      buildContext: 'docker-master/dind'
    docker-master-git:
      azureImage: 'ubuntu-16.04'
      buildContext: 'docker-master/git'
    docker-tianon:
      azureImage: 'ubuntu-16.04'
      buildContext: 'docker-tianon'
    duplicity:
      azureImage: 'ubuntu-16.04'
      buildContext: 'duplicity'
    ehour:
      azureImage: 'ubuntu-16.04'
      buildContext: 'ehour'
    exim4:
      azureImage: 'ubuntu-16.04'
      buildContext: 'exim4'
    familysearch-indexing:
      azureImage: 'ubuntu-16.04'
      buildContext: 'familysearch-indexing'
    github-hub:
      azureImage: 'ubuntu-16.04'
      buildContext: 'github-hub'
    github-pages:
      azureImage: 'ubuntu-16.04'
      buildContext: 'github-pages'
    glxgears:
      azureImage: 'ubuntu-16.04'
      buildContext: 'glxgears'
    gmpydl:
      azureImage: 'ubuntu-16.04'
      buildContext: 'gmpydl'
    gmvault:
      azureImage: 'ubuntu-16.04'
      buildContext: 'gmvault'
    google-cloud-print-connector:
      azureImage: 'ubuntu-16.04'
      buildContext: 'google-cloud-print-connector'
    google-musicmanager:
      azureImage: 'ubuntu-16.04'
      buildContext: 'google-musicmanager'
    grafana:
      azureImage: 'ubuntu-16.04'
      buildContext: 'grafana'
    haproxy-sks:
      azureImage: 'ubuntu-16.04'
      buildContext: 'haproxy-sks'
    jenkins:
      azureImage: 'ubuntu-16.04'
      buildContext: 'jenkins'
    jenkins-slave:
      azureImage: 'ubuntu-16.04'
      buildContext: 'jenkins/slave'
    jenkins-slave-debian:
      azureImage: 'ubuntu-16.04'
      buildContext: 'jenkins/slave/debian'
    kafka:
      azureImage: 'ubuntu-16.04'
      buildContext: 'kafka'
    kgb-bot:
      azureImage: 'ubuntu-16.04'
      buildContext: 'kgb-bot'
    latex:
      azureImage: 'ubuntu-16.04'
      buildContext: 'latex'
    makemkv:
      azureImage: 'ubuntu-16.04'
      buildContext: 'makemkv'
    mojo:
      azureImage: 'ubuntu-16.04'
      buildContext: 'mojo'
    mongodb-mms:
      azureImage: 'ubuntu-16.04'
      buildContext: 'mongodb-mms'
    mutt-gmail:
      azureImage: 'ubuntu-16.04'
      buildContext: 'mutt-gmail'
    network-toolbox-alpine:
      azureImage: 'ubuntu-16.04'
      buildContext: 'network-toolbox/alpine'
    network-toolbox-debian:
      azureImage: 'ubuntu-16.04'
      buildContext: 'network-toolbox/debian'
    nylas-n1:
      azureImage: 'ubuntu-16.04'
      buildContext: 'nylas/n1'
    nylas-sync-engine:
      azureImage: 'ubuntu-16.04'
      buildContext: 'nylas/sync-engine'
    perl:
      azureImage: 'ubuntu-16.04'
      buildContext: 'perl'
    phpmyadmin:
      azureImage: 'ubuntu-16.04'
      buildContext: 'phpmyadmin'
    plex-media-server:
      azureImage: 'ubuntu-16.04'
      buildContext: 'plex/media-server'
    prometheus:
      azureImage: 'ubuntu-16.04'
      buildContext: 'prometheus'
    prometheus-blackbox-exporter:
      azureImage: 'ubuntu-16.04'
      buildContext: 'prometheus/blackbox-exporter'
    prometheus-node-exporter:
      azureImage: 'ubuntu-16.04'
      buildContext: 'prometheus/node-exporter'
    robomongo:
      azureImage: 'ubuntu-16.04'
      buildContext: 'robomongo'
    rtorrent:
      azureImage: 'ubuntu-16.04'
      buildContext: 'rtorrent'
    ruby-passenger:
      azureImage: 'ubuntu-16.04'
      buildContext: 'ruby-passenger'
    ruby-unicorn:
      azureImage: 'ubuntu-16.04'
      buildContext: 'ruby-unicorn'
    ruby-unicorn-nginx:
      azureImage: 'ubuntu-16.04'
      buildContext: 'ruby-unicorn-nginx'
    sbuild:
      azureImage: 'ubuntu-16.04'
      buildContext: 'sbuild'
    skype:
      azureImage: 'ubuntu-16.04'
      buildContext: 'skype'
    slack:
      azureImage: 'ubuntu-16.04'
      buildContext: 'slack'
    sleeping-beauty:
      azureImage: 'ubuntu-16.04'
      buildContext: 'sleeping-beauty'
    speedtest:
      azureImage: 'ubuntu-16.04'
      buildContext: 'speedtest'
    steam:
      azureImage: 'ubuntu-16.04'
      buildContext: 'steam'
    travis-cli:
      azureImage: 'ubuntu-16.04'
      buildContext: 'travis-cli'
    true:
      azureImage: 'ubuntu-16.04'
      buildContext: 'true'
    wine-32:
      azureImage: 'ubuntu-16.04'
      buildContext: 'wine/32'
    wine-64:
      azureImage: 'ubuntu-16.04'
      buildContext: 'wine/64'
    xen-orchestra:
      azureImage: 'ubuntu-16.04'
      buildContext: 'xen-orchestra'
    ymlfmt:
      azureImage: 'ubuntu-16.04'
      buildContext: 'ymlfmt'

pool:
  vmImage: $(azureImage)

steps:
- bash: |
    set -Eeuo pipefail -x
    #git clone --depth 1 https://github.com/docker-library/official-images.git ~/oi
    git clone --depth 1 https://github.com/tianon/stackbrew.git -b azure ~/oi
    ~/oi/.azure/wait-for-docker.sh
    ~/oi/.azure/set-docker-tag.sh
  displayName: 'Prepare environment'

- bash: |
    set -Eeuo pipefail -x
    source <(wget -qO- 'https://github.com/tianon/pgp-happy-eyeballs/raw/master/hack-my-builds.sh')
  displayName: 'Apply pgp-happy-eyeballs'
  condition: eq( variables['Agent.OS'], 'Linux' )

- bash: |
    set -Eeuo pipefail -x
    docker build -t '$(dockerTag)' .
  workingDirectory: $(buildContext)
  displayName: '"docker build"'

- bash: |
    set -Eeuo pipefail -x
    ~/oi/test/run.sh '$(dockerTag)'
  displayName: 'Run tests'
  condition: eq( variables['Agent.OS'], 'Linux' )
  enabled: false # TODO enable this!

# vim:set tabstop=2 shiftwidth=2:
